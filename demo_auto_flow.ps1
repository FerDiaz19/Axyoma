# Demo del flujo autom√°tico de suscripciones
# Muestra c√≥mo el sistema debe funcionar autom√°ticamente

$BASE_URL = "http://localhost:8000"

Write-Host "=== DEMO DEL FLUJO AUTOM√ÅTICO DE SUSCRIPCIONES ===" -ForegroundColor Green
Write-Host "Este script demuestra c√≥mo el sistema debe funcionar autom√°ticamente:" -ForegroundColor Cyan
Write-Host "‚Ä¢ Sin suscripci√≥n = Estado Suspendido" -ForegroundColor White
Write-Host "‚Ä¢ Con pago = Estado Activo autom√°ticamente" -ForegroundColor White
Write-Host "‚Ä¢ SuperAdmin ve detalles completos" -ForegroundColor White
Write-Host ""

# Funci√≥n para hacer requests con manejo de errores
function Invoke-ApiRequest {
    param($Url, $Method = "GET", $Body = $null)
    try {
        $headers = @{ "Content-Type" = "application/json" }
        if ($Body) {
            $response = Invoke-RestMethod -Uri $Url -Method $Method -Headers $headers -Body ($Body | ConvertTo-Json) -ErrorAction Stop
        } else {
            $response = Invoke-RestMethod -Uri $Url -Method $Method -Headers $headers -ErrorAction Stop
        }
        return $response
    } catch {
        Write-Host "Error: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# 1. Estado inicial (debe mostrar suspendido)
Write-Host "1. üîç VERIFICANDO ESTADO INICIAL..." -ForegroundColor Yellow
$estadoInicial = Invoke-ApiRequest "$BASE_URL/suscripciones/info_suscripcion_empresa/?empresa_id=1"
if ($estadoInicial) {
    Write-Host "üìä Estado inicial de Empresa ID 1:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Tiene suscripci√≥n: $($estadoInicial.tiene_suscripcion)" -ForegroundColor $(if($estadoInicial.tiene_suscripcion) { "Green" } else { "Red" })
    Write-Host "   ‚Ä¢ Estado: $($estadoInicial.estado)" -ForegroundColor $(if($estadoInicial.estado -eq "activa") { "Green" } else { "Yellow" })
    Write-Host "   ‚Ä¢ Requiere pago: $($estadoInicial.requiere_pago)" -ForegroundColor $(if($estadoInicial.requiere_pago) { "Red" } else { "Green" })
    Write-Host "   ‚Ä¢ Mensaje: $($estadoInicial.mensaje)" -ForegroundColor White
    
    if ($estadoInicial.requiere_pago) {
        Write-Host "   ‚úÖ CORRECTO: Sin suscripci√≥n = Estado suspendido" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå PROBLEMA: Deber√≠a requerir pago" -ForegroundColor Red
    }
}
Write-Host ""

# 2. Proceso autom√°tico de suscripci√≥n + pago
Write-Host "2. üîÑ PROCESO AUTOM√ÅTICO: SUSCRIPCI√ìN + PAGO..." -ForegroundColor Yellow

# Crear suscripci√≥n
Write-Host "   üìù Creando suscripci√≥n..." -ForegroundColor Cyan
$suscripcionData = @{
    empresa_id = 1
    plan_id = 1
}
$suscripcion = Invoke-ApiRequest "$BASE_URL/suscripciones/crear_suscripcion/" "POST" $suscripcionData

if ($suscripcion) {
    $suscripcionId = $suscripcion.suscripcion.suscripcion_id
    Write-Host "   ‚úÖ Suscripci√≥n creada (ID: $suscripcionId) - Estado: $($suscripcion.suscripcion.estado)" -ForegroundColor Green
    
    # Procesar pago autom√°ticamente
    Write-Host "   üí≥ Procesando pago autom√°tico..." -ForegroundColor Cyan
    $pagoData = @{
        suscripcion_id = $suscripcionId
        monto_pago = 299.00
        transaccion_id = "AUTO-$(Get-Date -Format 'yyyyMMddHHmmss')"
    }
    $pago = Invoke-ApiRequest "$BASE_URL/suscripciones/procesar_pago/" "POST" $pagoData
    
    if ($pago) {
        Write-Host "   ‚úÖ Pago procesado (ID: $($pago.pago.pago_id)) - Estado: $($pago.pago.estado_pago)" -ForegroundColor Green
    }
}
Write-Host ""

# 3. Verificar estado despu√©s del pago (debe estar activo)
Write-Host "3. ‚úÖ VERIFICANDO ESTADO DESPU√âS DEL PAGO..." -ForegroundColor Yellow
$estadoFinal = Invoke-ApiRequest "$BASE_URL/suscripciones/info_suscripcion_empresa/?empresa_id=1"
if ($estadoFinal) {
    Write-Host "üìä Estado final de Empresa ID 1:" -ForegroundColor Cyan
    Write-Host "   ‚Ä¢ Tiene suscripci√≥n: $($estadoFinal.tiene_suscripcion)" -ForegroundColor $(if($estadoFinal.tiene_suscripcion) { "Green" } else { "Red" })
    Write-Host "   ‚Ä¢ Estado: $($estadoFinal.estado)" -ForegroundColor $(if($estadoFinal.estado -eq "activa") { "Green" } else { "Yellow" })
    Write-Host "   ‚Ä¢ Requiere pago: $($estadoFinal.requiere_pago)" -ForegroundColor $(if($estadoFinal.requiere_pago) { "Red" } else { "Green" })
    Write-Host "   ‚Ä¢ D√≠as restantes: $($estadoFinal.dias_restantes)" -ForegroundColor White
    Write-Host "   ‚Ä¢ Mensaje: $($estadoFinal.mensaje)" -ForegroundColor White
    
    if ($estadoFinal.tiene_suscripcion -and $estadoFinal.estado -eq "activa" -and -not $estadoFinal.requiere_pago) {
        Write-Host "   ‚úÖ PERFECTO: Con pago = Estado activo autom√°ticamente" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå PROBLEMA: Estado no se activ√≥ autom√°ticamente" -ForegroundColor Red
    }
}
Write-Host ""

# 4. Verificar datos en SuperAdmin
Write-Host "4. üõ†Ô∏è VERIFICANDO DATOS EN SUPERADMIN..." -ForegroundColor Yellow

Write-Host "   üìã Suscripciones (para SuperAdmin):" -ForegroundColor Cyan
$suscripciones = Invoke-ApiRequest "$BASE_URL/suscripciones/listar_suscripciones/"
if ($suscripciones -and $suscripciones.Count -gt 0) {
    foreach ($sub in $suscripciones) {
        $diasRestantes = [math]::Ceiling(((Get-Date $sub.fecha_fin) - (Get-Date)).TotalDays)
        $statusIcon = if ($diasRestantes -lt 0) { "‚ùå" } elseif ($diasRestantes -le 7) { "‚è∞" } else { "‚úÖ" }
        
        Write-Host "      $statusIcon ID: $($sub.suscripcion_id) | Empresa: $($sub.empresa_id) | Estado: $($sub.estado) | D√≠as: $diasRestantes" -ForegroundColor White
    }
} else {
    Write-Host "      ‚ö†Ô∏è No hay suscripciones registradas" -ForegroundColor Yellow
}

Write-Host "   üí∞ Pagos (para SuperAdmin):" -ForegroundColor Cyan
$pagos = Invoke-ApiRequest "$BASE_URL/suscripciones/listar_pagos/"
if ($pagos -and $pagos.Count -gt 0) {
    foreach ($p in $pagos) {
        $statusIcon = if ($p.estado_pago -eq "completado") { "‚úÖ" } elseif ($p.estado_pago -eq "pendiente") { "‚è≥" } else { "‚ùå" }
        
        Write-Host "      $statusIcon ID: $($p.pago_id) | Monto: $($p.monto_pago) | Estado: $($p.estado_pago) | Fecha: $($p.fecha_pago)" -ForegroundColor White
    }
} else {
    Write-Host "      ‚ö†Ô∏è No hay pagos registrados" -ForegroundColor Yellow
}
Write-Host ""

# 5. Resumen y pr√≥ximos pasos
Write-Host "=== üìä RESUMEN DEL FLUJO AUTOM√ÅTICO ===" -ForegroundColor Green

$funcionaCorrectamente = $estadoFinal.tiene_suscripcion -and $estadoFinal.estado -eq "activa" -and -not $estadoFinal.requiere_pago

if ($funcionaCorrectamente) {
    Write-Host "üéâ ¬°FLUJO AUTOM√ÅTICO FUNCIONANDO PERFECTAMENTE!" -ForegroundColor Green
    Write-Host ""
    Write-Host "‚úÖ Estado inicial: Suspendido (sin suscripci√≥n)" -ForegroundColor Green
    Write-Host "‚úÖ Despu√©s del pago: Activo autom√°ticamente" -ForegroundColor Green
    Write-Host "‚úÖ SuperAdmin: Ve datos actualizados" -ForegroundColor Green
    Write-Host ""
    Write-Host "üåê PRUEBA EN EL FRONTEND:" -ForegroundColor Cyan
    Write-Host "1. Dashboard empresarial debe mostrar: '‚úÖ ACTIVA (X d√≠as)'" -ForegroundColor White
    Write-Host "2. NO debe aparecer bot√≥n 'Activar Suscripci√≥n'" -ForegroundColor White
    Write-Host "3. Secci√≥n 'Reportes' debe estar disponible" -ForegroundColor White
    Write-Host "4. SuperAdmin debe mostrar suscripci√≥n activa con d√≠as restantes" -ForegroundColor White
    
} else {
    Write-Host "‚ö†Ô∏è FLUJO AUTOM√ÅTICO NECESITA AJUSTES" -ForegroundColor Yellow
    Write-Host ""
    if (-not $estadoFinal.tiene_suscripcion) {
        Write-Host "‚ùå Problema: No detecta la suscripci√≥n como activa" -ForegroundColor Red
    }
    if ($estadoFinal.requiere_pago) {
        Write-Host "‚ùå Problema: Sigue requiriendo pago despu√©s de procesar" -ForegroundColor Red
    }
    if ($estadoFinal.estado -ne "activa") {
        Write-Host "‚ùå Problema: Estado no es 'activa' despu√©s del pago" -ForegroundColor Red
    }
}

Write-Host ""
Write-Host "üìÅ ARCHIVOS DE PERSISTENCIA:" -ForegroundColor Cyan
$mockFile = "c:\xampp2\htdocs\UTT4B\Axyoma2\Backend\apps\mock_data.json"
if (Test-Path $mockFile) {
    $size = (Get-Item $mockFile).Length
    Write-Host "‚úÖ mock_data.json existe ($size bytes) - Datos persisten entre reinicios" -ForegroundColor Green
} else {
    Write-Host "‚ö†Ô∏è mock_data.json no existe - Datos se perder√°n al reiniciar servidor" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üîÑ Para reiniciar la demo: .\reset_mock_data.ps1" -ForegroundColor Gray
