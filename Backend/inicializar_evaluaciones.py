#!/usr/bin/env python
"""
Script para inicializar los datos base de evaluaciones
seg√∫n la estructura SQL original
"""

import os
import sys
import django

# Configurar Django
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings.local')
django.setup()

from apps.surveys.models_new import (
    TipoEvaluacion, ConjuntoOpciones, OpcionConjunto
)

def crear_tipos_evaluacion():
    """
    Crear los tipos de evaluaci√≥n predefinidos
    """
    tipos = [
        ('Normativa', 'Evaluaciones basadas en normativas oficiales'),
        ('Interna', 'Evaluaciones creadas para fines de evaluaci√≥n internos'),
        ('360 Grados', 'Evaluaciones donde se recibe feedback de m√∫ltiples fuentes'),
    ]
    
    for nombre, descripcion in tipos:
        tipo, created = TipoEvaluacion.objects.get_or_create(
            nombre=nombre,
            defaults={'descripcion': descripcion}
        )
        if created:
            print(f"‚úÖ Tipo de evaluaci√≥n creado: {nombre}")
        else:
            print(f"‚ÑπÔ∏è  Tipo de evaluaci√≥n ya existe: {nombre}")

def crear_conjuntos_opciones():
    """
    Crear conjuntos de opciones predefinidos
    """
    # Conjunto Likert 5-Puntos
    conjunto_likert, created = ConjuntoOpciones.objects.get_or_create(
        nombre='Likert 5-Puntos (Acuerdo)',
        defaults={
            'descripcion': 'Escala est√°ndar de 5 puntos para preguntas de acuerdo/desacuerdo.',
            'predefinido': True
        }
    )
    
    if created:
        print("‚úÖ Conjunto Likert 5-Puntos creado")
        opciones_likert = [
            ('Totalmente en desacuerdo', 1, 1, 1),
            ('En desacuerdo', 2, 2, 2),
            ('Ni de acuerdo ni en desacuerdo', 3, 3, 3),
            ('De acuerdo', 4, 4, 4),
            ('Totalmente de acuerdo', 5, 5, 5),
        ]
        
        for texto, valor_num, puntuaje, orden in opciones_likert:
            OpcionConjunto.objects.create(
                conjunto_opciones=conjunto_likert,
                texto_opcion=texto,
                valor_numerico=valor_num,
                puntuaje_escala=puntuaje,
                numero_orden=orden
            )
            print(f"  ‚úÖ Opci√≥n creada: {texto}")
    
    # Conjunto S√≠/No
    conjunto_sino, created = ConjuntoOpciones.objects.get_or_create(
        nombre='S√≠/No',
        defaults={
            'descripcion': 'Opciones de respuesta S√≠ o No.',
            'predefinido': True
        }
    )
    
    if created:
        print("‚úÖ Conjunto S√≠/No creado")
        opciones_sino = [
            ('S√≠', True, 1),
            ('No', False, 2),
        ]
        
        for texto, valor_bool, orden in opciones_sino:
            OpcionConjunto.objects.create(
                conjunto_opciones=conjunto_sino,
                texto_opcion=texto,
                valor_booleano=valor_bool,
                numero_orden=orden
            )
            print(f"  ‚úÖ Opci√≥n creada: {texto}")
    
    # Conjunto Nivel de Satisfacci√≥n
    conjunto_satisfaccion, created = ConjuntoOpciones.objects.get_or_create(
        nombre='Nivel de Satisfacci√≥n',
        defaults={
            'descripcion': 'Escala de 1 a 10 para medir satisfacci√≥n.',
            'predefinido': False
        }
    )
    
    if created:
        print("‚úÖ Conjunto Nivel de Satisfacci√≥n creado")
        opciones_satisfaccion = [
            ('1 - Muy Insatisfecho', 1, 1, 1),
            ('5 - Neutro', 5, 5, 2),
            ('10 - Muy Satisfecho', 10, 10, 3),
        ]
        
        for texto, valor_num, puntuaje, orden in opciones_satisfaccion:
            OpcionConjunto.objects.create(
                conjunto_opciones=conjunto_satisfaccion,
                texto_opcion=texto,
                valor_numerico=valor_num,
                puntuaje_escala=puntuaje,
                numero_orden=orden
            )
            print(f"  ‚úÖ Opci√≥n creada: {texto}")

def main():
    print("üöÄ Inicializando datos base de evaluaciones...")
    print("=" * 50)
    
    # Crear tipos de evaluaci√≥n
    print("üìù Creando tipos de evaluaci√≥n...")
    crear_tipos_evaluacion()
    
    print("\n" + "=" * 50)
    
    # Crear conjuntos de opciones
    print("üìã Creando conjuntos de opciones...")
    crear_conjuntos_opciones()
    
    print("\n" + "=" * 50)
    print("‚úÖ Inicializaci√≥n completada exitosamente!")
    
    # Mostrar estad√≠sticas
    print(f"üìä Estad√≠sticas finales:")
    print(f"  - Tipos de evaluaci√≥n: {TipoEvaluacion.objects.count()}")
    print(f"  - Conjuntos de opciones: {ConjuntoOpciones.objects.count()}")
    print(f"  - Opciones totales: {OpcionConjunto.objects.count()}")

if __name__ == "__main__":
    main()
